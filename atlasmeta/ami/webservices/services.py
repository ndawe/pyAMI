##################################################
# AMISecureWebServiceService_services.py
# generated by ZSI.generate.wsdl2python
##################################################


from .types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI
from ZSI.generate.pyclass import pyclass_type
from ..endpoint import AMIEndPoint

# Locator
class AMISecureWebServiceServiceLocator:
    def getAMISecureWebServiceAddress(self):
        return AMIEndPoint.getEndPoint()
    def getAMISecureWebService(self, url=None, **kw):
        return AMISecureWebServiceSoapBindingSOAP(url or AMIEndPoint.getEndPoint(), **kw)

# Methods
class AMISecureWebServiceSoapBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: execAMICommand
    def execAMICommand(self, request):
        if isinstance(request, execAMICommandRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=execAMICommandResponse.typecode.ofwhat, pyclass=execAMICommandResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: execAMICommand_map_array
    def execAMICommand_map_array(self, request):
        if isinstance(request, execAMICommand_map_arrayRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=execAMICommand_map_arrayResponse.typecode.ofwhat, pyclass=execAMICommand_map_arrayResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: execAMICommand_map
    def execAMICommand_map(self, request):
        if isinstance(request, execAMICommand_mapRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=execAMICommand_mapResponse.typecode.ofwhat, pyclass=execAMICommand_mapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: execAMICommand_array
    def execAMICommand_array(self, request):
        if isinstance(request, execAMICommand_arrayRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=execAMICommand_arrayResponse.typecode.ofwhat, pyclass=execAMICommand_arrayResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response
    # op: uploadProxy
    def uploadProxy(self, request, **kw):
        if isinstance(request, uploadProxyRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=uploadProxyResponse.typecode.ofwhat, pyclass=uploadProxyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

_execAMICommandRequestTypecode = Struct(pname=("http://DefaultNamespace","execAMICommand"), ofwhat=[ns0.Map_Def(pname="confArgs", aname="_confArgs", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.Map_Def(pname="args", aname="_args", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://DefaultNamespace")
class execAMICommandRequest:
    typecode = _execAMICommandRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self):
        self._confArgs = None
        self._args = None
        return
execAMICommandRequest.typecode.pyclass = execAMICommandRequest

_execAMICommandResponseTypecode = Struct(pname=(AMIEndPoint.getEndPoint(),"execAMICommandResponse"), ofwhat=[ZSI.TC.String(pname="execAMICommandReturn", aname="_execAMICommandReturn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded=AMIEndPoint.getEndPoint())
class execAMICommandResponse:
    typecode = _execAMICommandResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self):
        self._execAMICommandReturn = None
        return
execAMICommandResponse.typecode.pyclass = execAMICommandResponse

_execAMICommand_map_arrayRequestTypecode = Struct(pname=("http://DefaultNamespace","execAMICommand_map_array"), ofwhat=[ns0.Map_Def(pname="confArgs", aname="_confArgs", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns1.ArrayOf_soapenc_string_Def(pname="args", aname="_args", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://DefaultNamespace")
class execAMICommand_map_arrayRequest:
    typecode = _execAMICommand_map_arrayRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self):
        self._confArgs = None
        self._args = None
        return
execAMICommand_map_arrayRequest.typecode.pyclass = execAMICommand_map_arrayRequest

_execAMICommand_map_arrayResponseTypecode = Struct(pname=(AMIEndPoint.getEndPoint(),"execAMICommand_map_arrayResponse"), ofwhat=[ZSI.TC.String(pname="execAMICommand_map_arrayReturn", aname="_execAMICommand_map_arrayReturn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded=AMIEndPoint.getEndPoint())
class execAMICommand_map_arrayResponse:
    typecode = _execAMICommand_map_arrayResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self):
        self._execAMICommand_map_arrayReturn = None
        return
execAMICommand_map_arrayResponse.typecode.pyclass = execAMICommand_map_arrayResponse

_execAMICommand_mapRequestTypecode = Struct(pname=("http://DefaultNamespace","execAMICommand_map"), ofwhat=[ns0.Map_Def(pname="args", aname="_args", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://DefaultNamespace")
class execAMICommand_mapRequest:
    typecode = _execAMICommand_mapRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self):
        self._args = None
        return
execAMICommand_mapRequest.typecode.pyclass = execAMICommand_mapRequest

_execAMICommand_mapResponseTypecode = Struct(pname=(AMIEndPoint.getEndPoint(),"execAMICommand_mapResponse"), ofwhat=[ZSI.TC.String(pname="execAMICommand_mapReturn", aname="_execAMICommand_mapReturn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded=AMIEndPoint.getEndPoint())
class execAMICommand_mapResponse:
    typecode = _execAMICommand_mapResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self):
        self._execAMICommand_mapReturn = None
        return
execAMICommand_mapResponse.typecode.pyclass = execAMICommand_mapResponse

_execAMICommand_arrayRequestTypecode = Struct(pname=("http://DefaultNamespace","execAMICommand_array"), ofwhat=[ns1.ArrayOf_soapenc_string_Def(pname="args", aname="_args", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://DefaultNamespace")
class execAMICommand_arrayRequest:
    typecode = _execAMICommand_arrayRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self):
        self._args = None
        return
execAMICommand_arrayRequest.typecode.pyclass = execAMICommand_arrayRequest

_execAMICommand_arrayResponseTypecode = Struct(pname=(AMIEndPoint.getEndPoint(),"execAMICommand_arrayResponse"), ofwhat=[ZSI.TC.String(pname="execAMICommand_arrayReturn", aname="_execAMICommand_arrayReturn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded=AMIEndPoint.getEndPoint())
class execAMICommand_arrayResponse:
    typecode = _execAMICommand_arrayResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self):
        self._execAMICommand_arrayReturn = None
        return
execAMICommand_arrayResponse.typecode.pyclass = execAMICommand_arrayResponse

class uploadProxyRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        proxyFileContent -- part proxyFileContent
        """
        self._proxyFileContent =  kw.get("proxyFileContent")
uploadProxyRequest.typecode = Struct(pname=("http://Webservice.AMI.Bookkeeping.Database.atlas.hep.net","uploadProxy"), ofwhat=[ZSI.TC.String(pname="proxyFileContent", aname="_proxyFileContent", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=uploadProxyRequest, encoded="http://Webservice.AMI.Bookkeeping.Database.atlas.hep.net")

class uploadProxyResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        uploadProxyReturn -- part uploadProxyReturn
        """
        self._uploadProxyReturn =  kw.get("uploadProxyReturn")
uploadProxyResponse.typecode = Struct(pname=(AMIEndPoint.getEndPoint(),"uploadProxyResponse"), ofwhat=[ZSI.TC.String(pname="uploadProxyReturn", aname="_uploadProxyReturn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=uploadProxyResponse, encoded=AMIEndPoint.getEndPoint())

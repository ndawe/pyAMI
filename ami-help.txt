
This file gives help in setting up secure pyAMI and in using the commands.
==========================================================================

For a longer version of the help please go to the AMI web site
http://ami.in2p3.fr

Building the pyAMI package makes 3 aliases.
amiHelp			Prints this file
amiListAllCommands	Lists all the AMI web service commands which have been wrapped in python.
amiCommand		allows the sending of an arbitrary command to the AMI web service.

===================================================================
IF YOU NEED TO USE PYAMI for WRITING please first set up a VOMS proxy
source /afs/cern.ch/project/gd/LCG-share/current/etc/profile.d/grid_env.sh 
voms-proxy-init --voms=atlas
===================================================================

A run enabled utility script is available to set up aliases for all the pyAMI command wrappers.

makeAMICommandList.py 

makeAMICommandList will make two shell scripts which will set up aliases to wrappers for you.

Run the correct script for your shell
source ./aliasMaker.[c]sh


Using the wrappers
==================

All AMI command wrappers have an option -help

All commands output in text by default 
Other possibilities are (case insensitive options)
    output=xml (native format -  no transformation applied)
    output=cvs (for recuperation in a spread sheet table) 
    output=html
    output=htmlTable
    output=verbose (text plus some extra information)
    output=gpickle (writes a gpickle file called output.gpickle)
    output=pipo.gpickle (writes a gpickle file called pipo.gpickle)
    
 Example
 amiListConfigurationTag -configTag=s1 -output=s1.gpickle
   
The command amiGetDatasetInfo is an exception to the above; it
requires an extra option to switch from the default text.
Use amiGetDatasetInfo -help 
for more details.

For commands where permission is required you can add the options if you have NOT set up a proxy.
   AMIUser=name AMIPass=password
   
   If you HAVE a proxy, any Login and Password you give will override the proxy.

 By default the list commands will return the total number of results
 but only the first 50 rows of a result set are output.
 Use the option -limit=start,number
 to scroll through the results.
 Example:
 
  amiListProjects data08 -limit=10,20
  
  will list 20 projects with "data08" in the project name starting at the 10th.
  Without the limit argument, the first 50 will be returned.
   
 N.B. AMI will not return more than 1000 results. 
 
 Options which are field value pairs can be given either as
  -field=value
  or
  field=value
  
Options can be given IN ANY ORDER.


Using "amiCommand"
==================

"amiCommand" will send any AMICommand to the server directly (no python wrapper involved)

amiCommand CommandName [arg[=value]]

Example (to list all valid dataTypes in xml):
 amiCommand ListElement -entity=data_type -project=Atlas_Production -processingStep=Atlas_Production writeStatus=valid -output=xml

Please see the on-line tutorial and client documentation for more details of how to use the "amiCommand" facility.
More than 200 commands are available for AMI and TagCollector.

http://ami.in2p3.fr
Please send all bug reports, suggestions etc. to atlas-bookkeeping@cern.ch

Author : solveig.albrand@lpsc.in2p3.fr         2009-07-20

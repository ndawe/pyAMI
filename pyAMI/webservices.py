##################################################
# AMISecureWebServiceService_services_types.py
# generated by ZSI.generate.wsdl2python
# but cleaned up a bit by a human...
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, \
        TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import urlparse, types
from pyAMI import endpoint
from pyAMI.httpconnection import AMIHTTPConnection, AMIHTTPSConnection

##############################
# targetNamespace
# https://ccami01.in2p3.fr:8443/AMI/services/AMIWebService
##############################

class ns1:

    #targetNamespace = endpoint.get_endpoint()

    class ArrayOf_soapenc_string_Def(ZSI.TC.Array, TypeDefinition):

        #complexType/complexContent base="SOAP-ENC:Array"
        schema = endpoint.get_endpoint()
        type = (schema, "ArrayOf_soapenc_string")
        schema = ""
        type = ""
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False,
                attributes=None, **kw):
            ofwhat = ZSI.TC.String(None, typed=False)
            atype = (u'http://schemas.xmlsoap.org/soap/encoding/', u'string[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname,
                    childnames='item', **kw)

    # end class ns1 (tns: https://ami.in2p3.fr/AMI/services/AMIWebService)

##############################
# targetNamespace
# http://xml.apache.org/xml-soap
##############################

class ns0:

    targetNamespace = "http://xml.apache.org/xml-soap"

    class mapItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):

        schema = "http://xml.apache.org/xml-soap"
        type = (schema, "mapItem")

        def __init__(self, pname, ofwhat=(), attributes=None, extend=False,
                restrict=False, **kw):

            ns = ns0.mapItem_Def.schema
            TClist = [ZSI.TC.AnyType(pname="key", aname="_key", minOccurs=1,
                maxOccurs=1, nillable=True, typed=False,
                encoded=kw.get("encoded")),
                ZSI.TC.AnyType(pname="value", aname="_value", minOccurs=1,
                    maxOccurs=1, nillable=True, typed=False,
                    encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist,
                    pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "mapItem_Holder"
            self.pyclass = Holder

    class Map_Def(ZSI.TCcompound.ComplexType, TypeDefinition):

        schema = "http://xml.apache.org/xml-soap"
        type = (schema, "Map")

        def __init__(self, pname, ofwhat=(), attributes=None, extend=False,
                restrict=False, **kw):

            ns = ns0.Map_Def.schema
            TClist = [GTD("http://xml.apache.org/xml-soap", "mapItem",
                lazy=False)(pname="item", aname="_item", minOccurs=0,
                    maxOccurs="unbounded", nillable=False, typed=False,
                    encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist,
                    pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._item = []
                    return
            Holder.__name__ = "Map_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://xml.apache.org/xml-soap)


##################################################
# AMISecureWebServiceService_services.py
# generated by ZSI.generate.wsdl2python
##################################################


# Locator
class AMISecureWebServiceServiceLocator:

    def getAMISecureWebServiceAddress(self):

        return endpoint.get_endpoint()

    def getAMISecureWebService(self, url=None, **kw):

        return AMISecureWebServiceSoapBindingSOAP(
                url or endpoint.get_endpoint(), **kw)


# Methods
class AMISecureWebServiceSoapBindingSOAP:

    def __init__(self, url, **kw):

        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        self.binding.defaultHttpTransport = AMIHTTPConnection
        # no ws-addressing
        self.binding.defaultHttpsTransport = AMIHTTPSConnection

    # op: execAMICommand
    def execAMICommand(self, request):

        if isinstance(request, execAMICommandRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="",
                encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None,
                ofwhat=execAMICommandResponse.typecode.ofwhat,
                pyclass=execAMICommandResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: execAMICommand_map_array
    def execAMICommand_map_array(self, request):

        if isinstance(request, execAMICommand_map_arrayRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="",
                encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None,
                ofwhat=execAMICommand_map_arrayResponse.typecode.ofwhat,
                pyclass=execAMICommand_map_arrayResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: execAMICommand_map
    def execAMICommand_map(self, request):

        if isinstance(request, execAMICommand_mapRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="",
                encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None,
                ofwhat=execAMICommand_mapResponse.typecode.ofwhat,
                pyclass=execAMICommand_mapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: execAMICommand_array
    def execAMICommand_array(self, request):

        if isinstance(request, execAMICommand_arrayRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="",
                encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None,
                ofwhat=execAMICommand_arrayResponse.typecode.ofwhat,
                pyclass=execAMICommand_arrayResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: uploadProxy
    def uploadProxy(self, request, **kw):

        if isinstance(request, uploadProxyRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="",
                encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None,
                ofwhat=uploadProxyResponse.typecode.ofwhat,
                pyclass=uploadProxyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response


_execAMICommandRequestTypecode = Struct(
        pname=("http://DefaultNamespace", "execAMICommand"),
        ofwhat=[ns0.Map_Def(pname="confArgs", aname="_confArgs", typed=False,
            encoded=None, minOccurs=1, maxOccurs=1, nillable=True),
            ns0.Map_Def(pname="args", aname="_args", typed=False, encoded=None,
                minOccurs=1, maxOccurs=1, nillable=True)],
        pyclass=None, encoded="http://DefaultNamespace")

class execAMICommandRequest:

    typecode = _execAMICommandRequestTypecode
    __metaclass__ = pyclass_type

    def __init__(self):

        self._confArgs = None
        self._args = None
        return

execAMICommandRequest.typecode.pyclass = execAMICommandRequest

_execAMICommandResponseTypecode = Struct(
        pname=(endpoint.get_endpoint(), "execAMICommandResponse"),
        ofwhat=[ZSI.TC.String(pname="execAMICommandReturn",
            aname="_execAMICommandReturn", typed=False, encoded=None,
            minOccurs=1, maxOccurs=1, nillable=True)],
        pyclass=None, encoded=endpoint.get_endpoint())

class execAMICommandResponse:

    typecode = _execAMICommandResponseTypecode
    __metaclass__ = pyclass_type

    def __init__(self):

        self._execAMICommandReturn = None
        return

execAMICommandResponse.typecode.pyclass = execAMICommandResponse

_execAMICommand_map_arrayRequestTypecode = Struct(
        pname=("http://DefaultNamespace", "execAMICommand_map_array"),
        ofwhat=[ns0.Map_Def(pname="confArgs", aname="_confArgs", typed=False,
            encoded=None, minOccurs=1, maxOccurs=1, nillable=True),
            ns1.ArrayOf_soapenc_string_Def(pname="args", aname="_args",
                typed=False, encoded=None, minOccurs=1, maxOccurs=1,
                nillable=True)],
        pyclass=None, encoded="http://DefaultNamespace")

class execAMICommand_map_arrayRequest:

    typecode = _execAMICommand_map_arrayRequestTypecode
    __metaclass__ = pyclass_type

    def __init__(self):

        self._confArgs = None
        self._args = None
        return

execAMICommand_map_arrayRequest.typecode.pyclass = execAMICommand_map_arrayRequest

_execAMICommand_map_arrayResponseTypecode = Struct(
        pname=(endpoint.get_endpoint(), "execAMICommand_map_arrayResponse"),
        ofwhat=[ZSI.TC.String(pname="execAMICommand_map_arrayReturn",
            aname="_execAMICommand_map_arrayReturn", typed=False, encoded=None,
            minOccurs=1, maxOccurs=1, nillable=True)],
        pyclass=None, encoded=endpoint.get_endpoint())

class execAMICommand_map_arrayResponse:

    typecode = _execAMICommand_map_arrayResponseTypecode
    __metaclass__ = pyclass_type

    def __init__(self):

        self._execAMICommand_map_arrayReturn = None
        return

execAMICommand_map_arrayResponse.typecode.pyclass = execAMICommand_map_arrayResponse

_execAMICommand_mapRequestTypecode = Struct(
        pname=("http://DefaultNamespace", "execAMICommand_map"),
        ofwhat=[ns0.Map_Def(pname="args", aname="_args", typed=False,
            encoded=None, minOccurs=1, maxOccurs=1, nillable=True)],
        pyclass=None, encoded="http://DefaultNamespace")

class execAMICommand_mapRequest:

    typecode = _execAMICommand_mapRequestTypecode
    __metaclass__ = pyclass_type

    def __init__(self):

        self._args = None
        return

execAMICommand_mapRequest.typecode.pyclass = execAMICommand_mapRequest

_execAMICommand_mapResponseTypecode = Struct(
        pname=(endpoint.get_endpoint(), "execAMICommand_mapResponse"),
        ofwhat=[ZSI.TC.String(pname="execAMICommand_mapReturn",
            aname="_execAMICommand_mapReturn", typed=False, encoded=None,
            minOccurs=1, maxOccurs=1, nillable=True)],
        pyclass=None, encoded=endpoint.get_endpoint())

class execAMICommand_mapResponse:

    typecode = _execAMICommand_mapResponseTypecode
    __metaclass__ = pyclass_type

    def __init__(self):

        self._execAMICommand_mapReturn = None
        return

execAMICommand_mapResponse.typecode.pyclass = execAMICommand_mapResponse

_execAMICommand_arrayRequestTypecode = Struct(
        pname=("http://DefaultNamespace", "execAMICommand_array"),
        ofwhat=[ns1.ArrayOf_soapenc_string_Def(pname="args", aname="_args",
            typed=False, encoded=None, minOccurs=1, maxOccurs=1,
            nillable=True)],
        pyclass=None, encoded="http://DefaultNamespace")

class execAMICommand_arrayRequest:

    typecode = _execAMICommand_arrayRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self):

        self._args = None
        return

execAMICommand_arrayRequest.typecode.pyclass = execAMICommand_arrayRequest

_execAMICommand_arrayResponseTypecode = Struct(
        pname=(endpoint.get_endpoint(), "execAMICommand_arrayResponse"),
        ofwhat=[ZSI.TC.String(pname="execAMICommand_arrayReturn",
            aname="_execAMICommand_arrayReturn", typed=False, encoded=None,
            minOccurs=1, maxOccurs=1, nillable=True)],
        pyclass=None, encoded=endpoint.get_endpoint())

class execAMICommand_arrayResponse:

    typecode = _execAMICommand_arrayResponseTypecode
    __metaclass__ = pyclass_type

    def __init__(self):

        self._execAMICommand_arrayReturn = None
        return

execAMICommand_arrayResponse.typecode.pyclass = execAMICommand_arrayResponse

class uploadProxyRequest:

    def __init__(self, **kw):
        """Keyword parameters:
        proxyFileContent -- part proxyFileContent
        """
        self._proxyFileContent = kw.get("proxyFileContent")

uploadProxyRequest.typecode = Struct(
        pname=("http://Webservice.AMI.Bookkeeping.Database.atlas.hep.net",
            "uploadProxy"),
        ofwhat=[ZSI.TC.String(pname="proxyFileContent",
            aname="_proxyFileContent", typed=False, encoded=None, minOccurs=1,
            maxOccurs=1, nillable=True)],
        pyclass=uploadProxyRequest,
        encoded="http://Webservice.AMI.Bookkeeping.Database.atlas.hep.net")

class uploadProxyResponse:

    def __init__(self, **kw):
        """Keyword parameters:
        uploadProxyReturn -- part uploadProxyReturn
        """
        self._uploadProxyReturn = kw.get("uploadProxyReturn")

uploadProxyResponse.typecode = Struct(
        pname=(endpoint.get_endpoint(), "uploadProxyResponse"),
        ofwhat=[ZSI.TC.String(pname="uploadProxyReturn",
            aname="_uploadProxyReturn", typed=False, encoded=None, minOccurs=1,
            maxOccurs=1, nillable=True)],
        pyclass=uploadProxyResponse, encoded=endpoint.get_endpoint())
